;;; -*- Mode: Emacs-Lisp; -*-

;;; Keep Custom settings out of .emacs ---------------------------------

(setq custom-file "~/.emacs-custom.el")
(load custom-file 'noerror)

(require 'cl)

;;; Generic customizations ---------------------------------------------

(ido-mode t)                             ; more informative buffer switching
(line-number-mode 1)                     ; show line number in mode-line
(show-paren-mode t)                      ; flash matching paren
(column-number-mode 1)                   ; lines and columns, duh
(menu-bar-mode 0)                        ; keyboard only, please
(tool-bar-mode 0)                        ; no tool bar
(which-func-mode t)                      ; show current fn in mode-line
(setq-default indent-tabs-mode nil)      ; by default, insert spaces, not a full tab
(setq visible-bell t)                    ; no beeping!
(fset 'yes-or-no-p 'y-or-n-p)            ; query with y or n always
(setq inhibit-splash-screen t)           ; no splash screen!
(blink-cursor-mode 0)                    ; no blinking!
(auto-compression-mode 1)                ; inline edit files in gzip, bzip2 archives
(transient-mark-mode 0)                  ; don't highlight region, unless Ctrl-Space x 2
(setq help-window-select t)              ; always jump to the help window
(setq message-log-max 5000)              ; allow lots of messages
(put 'narrow-to-region 'disabled nil)    ; allow narrow-to-region
(put 'erase-buffer 'disabled nil)        ; allow erase-buffer
(put 'downcase-region 'disabled nil)     ; allow downcase-region
(put 'set-goal-column 'disabled nil)     ; allow set-goal-column
(setenv "PAGER" "/bin/cat")              ; for git in shell
(setq large-file-warning-threshold       ; tired of warning messages opening large TAGS files
      20000000)

(setq iswitchb-buffer-ignore '("^ " "*Buffer" "*Messages*" "*Help*"))
(set-background-color "gray97")

(setq frame-title-format "emacs [%b]")
(setq icon-title-format "emacs [%b]")
(setq mouse-yank-at-point t)             ; paste at cursor, not mouse location

(when (fboundp 'ffap-bindings)           ; find-file-at-point
  (ffap-bindings))

;;; Scroll settings ----------------------------------------------------

(setq scroll-preserve-screen-position nil) ; cursor stays in same place during page up/down
(setq scroll-margin 2)                     ; start scrolling when 2 rows from top/bottom
(setq scroll-conservatively 1)             ; smooth scrolling
(setq next-line-add-newlines nil)          ; don't add newlines just by scrolling
(set-scroll-bar-mode 'right)               ; scroll bar on right of buffer

(defadvice scroll-up (around scroll-up first act)
  "Keep cursor in the same column."
  (let ((col (current-column)))
    ad-do-it
    (move-to-column col)))

(defadvice scroll-down (around scroll-down first act)
  "Keep cursor in the same column."
  (let ((col (current-column)))
    ad-do-it
    (move-to-column col)))

;;; Compile mode settings ----------------------------------------------

(setq compilation-read-command t)       ; always ask for compile command
(setq compilation-scroll-output t)      ; scroll compilation window

; make compiler error clickable in shell
(add-hook 'shell-mode-hook
          (lambda () (compilation-shell-minor-mode))) 

;;; Load utility libs --------------------------------------------------

(add-to-list 'load-path "~/elisp")
(autoload 'find-file-recursively "find-recursive" "" t)
(when (< emacs-major-version 23) (autoload 'linum "linum" "" t))
(autoload 'light-symbol-mode "light-symbol" "" t)
(autoload 'htmlize-buffer "htmlize" "" t)
(autoload 'whitespace-mode "whitespace" "Toggle whitespace visualization." t)
(autoload 'typing-of-emacs "typing" "The Typing-Of-Emacs, a game" t)
(autoload 'magit-status "magit" "Magit git helper" t)
(add-to-list 'load-path "~/elisp/egg")
(autoload 'egg-minor-mode "egg" "" t)
(autoload 'css-mode "css-mode" "Mode for editing CSS files" t)
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(autoload 'ack "ack" "Ack is better than grep" t)
(autoload 'mcp-trace-mode "mcp-trace" "" t)

(load "mk-utils.el")

;;; Global keybindings -------------------------------------------------

(global-set-key (kbd "C-x C-m") 'execute-extended-command) ; = meta-x
(global-set-key (kbd "C-c C-m") 'execute-extended-command) ; = meta-x

(global-set-key (kbd "C-x C-b") 'bs-show)
(global-set-key (kbd "M-g")     'goto-line)
(global-set-key (kbd "C-x C-f") 'ido-find-file)
(global-set-key (kbd "C-x C-p") 'ffap)
(global-set-key (kbd "<C-tab>") 'other-window)

(global-set-key (kbd "C-s") 'isearch-forward-regexp)  ; use regexp version
(global-set-key (kbd "C-r") 'isearch-backward-regexp) ; use regexp version
(global-set-key (kbd "M-%") 'query-replace-regexp)    ; use regexp version

(global-set-key [f1]  'ibuffer)
(global-set-key [f2]  'mk-shell-dwim)                        ; C-u F2 => start new shell
(global-set-key [f3]  'kmacro-start-macro-or-insert-counter) ; emacs std
(global-set-key [f4]  'kmacro-end-or-call-macro)             ; emacs std
(global-set-key [f5]  'compile)
(global-set-key [f6]  'grep-find)
(global-set-key [f7]  'find-tag)
(global-set-key [f8]  'pop-tag-mark)
(global-set-key [f9]  'split-window-vertically)
(global-set-key [f10] 'split-window-horizontally)
(global-set-key [f11] 'delete-window)
(global-set-key [f12] 'delete-other-windows)

(global-set-key (kbd "C-x <down>")  'windmove-down)
(global-set-key (kbd "C-x <up>")    'windmove-up)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <left>")  'windmove-left)

(global-set-key (kbd "M-_") 'shrink-window)
(global-set-key (kbd "M-+") 'enlarge-window)

(global-set-key (kbd "M-/") 'hippie-expand)

(global-set-key (kbd "M-<down>") (lambda () (interactive) (scroll-up 1)))
(global-set-key (kbd "M-<up>") (lambda () (interactive) (scroll-down 1)))


;; not respecting .Xresources - why?
(when (string-equal system-name "wnc0h0t5.us.nortel.com")
  (set-default-font "Bitstream Vera Sans Mono-9"))


;;; Backups in ~/.backups ----------------------------------------------

(defconst use-backup-dir t)
(setq backup-directory-alist (quote ((".*" . "~/.backup")))
      version-control t                ; Use version numbers for backups
      kept-new-versions 2              ; Number of newest versions to keep
      kept-old-versions 5              ; Number of oldest versions to keep
      delete-old-versions t            ; Ask to delete excess backup versions?
      backup-by-copying-when-linked t) ; Copy linked files, don't rename.

;;; Emacs server -------------------------------------------------------

(require 'server)

(defun start-named-server (name)
  "Start a server named 'name' - ensure only 1 server of that name is running"
  (interactive "sServer Name: ")
  (setq server-name name)
  (setq mk-server-socket-file (concat server-socket-dir "/" name))
  (unless (server-running-p name)
    (server-start)))

(when (< emacs-major-version 23) ; Using emacs23 --daemon now
  (start-named-server "server")) ; default server-name

;;; Emacs Code Browser -------------------------------------------------

(add-to-list 'load-path "~/elisp/ecb-2.32")
(require 'ecb-autoloads)
(setq ecb-layout-name "left10")

;;; Programming Style: Java and C++ pick up c-mode-hook ----------------

(add-hook 'c-mode-hook
          '(lambda ()
             (c-set-style "K&R")
             (setq c-basic-offset 4)
             (setq indent-tabs-mode nil)
             (linum)))

;;; Perl setup ---------------------------------------------------------
(require 'cperl-mode)
(add-to-list 'auto-mode-alist '("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))

(defun perl-compile ()
  "Run perl -c against the current file"
  (interactive)
  (shell-command (concat "perl -c " (buffer-file-name))))

(add-hook 'cperl-mode-hook 
          '(lambda () 
             (local-set-key [f5] 'perl-compile)
             (linum)))

;;; Ruby setup ---------------------------------------------------------

(autoload 'ruby-mode "ruby-mode" "Mode for editing ruby source files" t)
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
(autoload 'run-ruby "inf-ruby" "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby" "key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook 'turn-on-font-lock)
(autoload 'rubydb "rubydb2x" "Ruby debugger" t)

(defun ruby-lint ()
  "Performs a Ruby compile check on the current file."
  (interactive)
  (shell-command (concat "ruby -c " (buffer-file-name))))

(add-hook 'ruby-mode-hook
          '(lambda ()
             (inf-ruby-keys)
             (local-set-key [f5] 'ruby-lint)
             (linum)))

;;; SLIME & Lisp(s) Setup --------------------------------------------------------

;;(when (string-equal system-name "mktop")
  (setq inferior-lisp-program "/opt/bin/sbcl --noinform")
  (add-to-list 'load-path "/home/mk/.sbcl/site/slime")
  (add-to-list 'load-path "/home/mk/.sbcl/site/slime/contrib")
  (autoload 'slime "slime" "Start and connect to the inferior lisp image" t)
  (autoload 'slime-mode "slime" "Start slime-mode for this buffer" t)
  (setq common-lisp-hyperspec-root "/usr/share/doc/hyperspec/")
  (autoload 'paredit-mode "paredit" "Minor mode for pseudo-structurally editing Lisp code." t)

  (eval-after-load "slime"
    '(progn
       (add-to-list 'slime-lisp-implementations '(sbcl ("/opt/bin/sbcl" "--noinform")))

       (slime-setup '(slime-fancy slime-asdf slime-banner slime-highlight-edits))

       (setq slime-complete-symbol*-fancy t
             slime-complete-symbol-function 'slime-fuzzy-complete-symbol
             slime-when-complete-filename-expand t
             slime-truncate-lines nil
             slime-autodoc-use-multiline-p t
             slime-startup-animation nil)

       (define-key slime-mode-map      (kbd "C-TAB")   'slime-fuzzy-complete-symbol)
       (define-key slime-repl-mode-map (kbd "C-TAB")   'slime-fuzzy-complete-symbol)
       (define-key slime-mode-map      (kbd "TAB")     'slime-indent-and-complete-symbol)
       (define-key slime-mode-map      (kbd "C-c ;")   'slime-insert-balanced-comments)
       (define-key slime-repl-mode-map (kbd "C-c ;")   'slime-insert-balanced-comments)
       (define-key slime-mode-map      (kbd "C-c M-;") 'slime-remove-balanced-comments)
       (define-key slime-repl-mode-map (kbd "C-c M-;") 'slime-remove-balanced-comments)
       (define-key slime-mode-map      (kbd "RET")     'newline-and-indent)
       (define-key slime-mode-map      (kbd "")        'newline-and-indent)
       (define-key slime-mode-map      (kbd "C-j")     'newline)
       (define-key slime-mode-map      (kbd "<f5>")    'slime-selector)
       (define-key slime-repl-mode-map (kbd "<f5>")    'slime-selector)
       (define-key slime-mode-map      (kbd "C-c r")   'mk-goto-repl)

       (paredit-mode +1)));)

; do slime mode for all lisp files
(add-hook 'lisp-mode-hook (lambda ()
                            (cond ((not (featurep 'slime))
                                   (require 'slime)
                                   (normal-mode)))
			    (modify-syntax-entry ?- "w")))

;;; Clojure ------------------------------------------------------------

(add-to-list 'load-path "~/elisp/swank-clojure")
(require 'clojure-mode)
(require 'swank-clojure)

;; (autoload 'clojure-test-mode "clojure-test-mode" "Clojure test mode" t)
;; (autoload 'clojure-test-maybe-enable "clojure-test-mode" "" t)
;; (add-hook 'clojure-mode-hook 'clojure-test-maybe-enable)

(eval-after-load "slime"
  '(progn
     (require 'swank-clojure)
     (add-to-list 'slime-lisp-implementations `(clojure ,(swank-clojure-cmd) :init swank-clojure-init) t)
     (add-hook 'slime-indentation-update-hooks 'swank-clojure-update-indentation)
     (add-hook 'slime-repl-mode-hook 'swank-clojure-slime-repl-modify-syntax t)
     (add-hook 'clojure-mode-hook 'swank-clojure-slime-mode-hook t)))

(setq mk-clojure-jar "/opt/clojure/clojure-1.0.0.jar")
(setq mk-clojure-contrib-jar "/opt/src/clojure-contrib/clojure-contrib.jar")

(setq swank-clojure-jar-path mk-clojure-jar)
(add-to-list 'swank-clojure-extra-classpaths mk-clojure-contrib-jar)

;; Sbcl is still the default slime target. Launch clojure with M-- M-x slime clojure

(defun clojure-project (path clojure-jar clojure-contrib-jar class-dir classpath-dirs)
  "Sets up classpath for a clojure project and starts a new SLIME session."
  (when (get-buffer "*inferior-lisp*")
    (kill-buffer "*inferior-lisp*"))
  (setq swank-clojure-binary nil
        swank-clojure-jar-path (or clojure-jar mk-clojure-jar)
        swank-clojure-extra-classpaths
        (cons (or clojure-contrib-jar mk-clojure-contrib-jar)
              classpath-dirs)
        swank-clojure-extra-vm-args
        (list "-server"
              "-Xdebug"
              "-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"
              (format "-Dclojure.compile.path=%s" (expand-file-name class-dir path)))
        ;; moves clojure to the front (default) position in the list
        slime-lisp-implementations
        (cons `(clojure ,(swank-clojure-cmd) :init swank-clojure-init)
              (remove-if '(lambda (x) (eq (car x) 'clojure))
                         slime-lisp-implementations)))
  (save-window-excursion
    (slime)))

;;; Elisp Setup --------------------------------------------------------

(defun mk-remove-elc-on-save ()
  "If saving an elisp file, remove the .elc file"
  (make-local-variable 'after-save-ook)
  (add-hook 'after-save-hook
            (lambda ()
              (let ((elc-file (concat buffer-file-name "c")))
                (when (file-exists-p elc-file)
                    (message "Removing %s" elc-file)
                    (delete-file elc-file))))))

(add-hook 'emacs-lisp-mode-hook 
          (lambda ()
            (turn-on-eldoc-mode)
            (mk-remove-elc-on-save)))

;;; NXML Setup ---------------------------------------------------------

(add-to-list 'load-path "~/elisp/nxml-mode")
(autoload 'nxml-mode "nxml-mode" "" t)
(add-to-list 'auto-mode-alist '("\\.\\(xml\\|xsl\\|rng\\|xhtml\\)\\'" . nxml-mode))

;;; Java Setup ---------------------------------------------------------

(add-to-list 'auto-mode-alist '("\\.java$" . java-mode))
(setq semantic-load-turn-useful-things-on t)
(setq semanticdb-default-save-directory "~/.semantic.cache")
(setq semanticdb-persistent-path nil)
(load "~/elisp/cedet-1.0pre3/common/cedet")
(add-to-list 'load-path "~/elisp/jde-2.3.5.1/lisp")
(when (file-directory-p "~/local/share/emacs/site-lisp/elib")
  (add-to-list 'load-path "~/local/share/emacs/site-lisp/elib"))

(require 'jde)
(require 'jde-ant)

(setq jde-jdk-registry (if (string-equal system-name "mktop")
                           '(("1.6.0_13" . "/opt/jdk1.6.0_13/"))
                         '(("1.5.0_11" . "/localdisk/jdk1.5.0_11/")
                           ("1.6.0_05" . "/localdisk/jdk1.6.0_05/")
                           ("1.6.0_11" . "/localdisk/data/matthewk/local/jdk1.6.0_11/")))
      jde-jdk          (list (if (string-equal system-name "mktop") "1.6.0_13" "1.6.0_11")))

(defun my-jde-mode-hook ()
  (local-set-key [f5] 'jde-compile))

(add-hook 'jde-mode-hook 'my-jde-mode-hook)

(add-hook 'java-mode-hook '(lambda ()
                             (c-set-style "java")
                             (setq c-basic-offset 3)
                             (setq-default indent-tabs-mode nil)
                             (linum)))

;;; Javascript ---------------------------------------------------------

(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(setq js2-basic-offset 2)
(setq js2-use-font-lock-faces t)

(require 'flymake-jslint)
(add-hook 'javascript-mode-hook (lambda () (flymake-mode t)))

;;; OCaml --------------------------------------------------------------

(add-to-list 'load-path "~/elisp/ocaml")
(add-to-list 'auto-mode-alist '("\\.ml[iyl]?$" .  caml-mode))
(autoload 'caml-mode "ocaml" "ocaml" "Major mode for editing Caml code." t)
(autoload 'camldebug "camldebug" "camldebug" "Debug caml mode")

;;; etags-select -------------------------------------------------------

(autoload 'etags-select-find-tag "etags-select" "for etags-select method" t)
(setq etags-select-no-select-for-one-match t)
(global-set-key "\M-." 'etags-select-find-tag)
(global-set-key [f7] 'etags-select-find-tag)

;;; Tramp (remote editing) ---------------------------------------------

(setq tramp-default-method "scp")
(setq tramp-default-user user-login-name)
(setq tramp-default-user-alist
               '(("scp" ".*\\.littleredbat\\.net\\" "mk")
                 ("scp" "lrb" "mk")
                 ("scp" ".*\\.nortel\\.com\\" "matthewk")
                 ("scp" "znc0y0n8.*" "matthewk")
                 ("scp" "deb" "matthewk")))

;;; Git VC backend setup -----------------------------------------------

(require 'vc-git)
(when (featurep 'vc-git) (add-to-list 'vc-handled-backends 'git))
(require 'git)
(autoload 'git-blame-mode "git-blame" "Minor mode for incremental blame for Git." t)

;;; org-mode -----------------------------------------------------------

(add-to-list 'load-path "~/elisp/org-6.29c/lisp")
(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))
(org-remember-insinuate)

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cr" 'org-remember)

(setq org-directory                     (concat "/home/" user-login-name "/proj/org")
      org-default-notes-file            (concat org-directory "/todo.org")
      org-agenda-files                  (file-expand-wildcards (concat org-directory "/*.org"))
      org-startup-folded                nil
      org-log-done                      'time
      org-return-follows-link           t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done  t)

(run-at-time "00:59" 3600 'org-save-all-org-buffers) ; git-auto-commit runs at top of hour

(setq org-remember-templates
      `(("Todo"    ?t "* TODO %?\n  %i\n" ,(concat org-directory "/todo.org")    "Inbox")
        ("Maybe"   ?m "* %?\n  %i\n"      ,(concat org-directory "/maybe.org")   "Misc")
        ("Journal" ?j "* %U %?\n\n  %i\n" ,(concat org-directory "/journal.org") bottom)
        ("Idea"    ?i "* %?\n  %i\n"      ,(concat org-directory "/ideas.org")   bottom)))

(add-hook 'org-mode-hook (lambda ()
                           (org-indent-mode)
                           (flyspell-mode 1)))

(setq org-todo-keywords
           '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "VERIFY(v)" 
                       "|" "DONE(d)" "DEFERRED(f)" "CANCELED(c)")))

;;; file-local bookmarks from bm.el ------------------------------------

; (require 'bm)
; (global-set-key (kbd "<M-f2>") 'bm-toggle)
; (global-set-key (kbd "<f2>")   'bm-next)
; (global-set-key (kbd "<S-f2>") 'bm-previous)

;;; Yet Another Snippet extension --------------------------------------

;; (require 'yasnippet)
;; (yas/initialize)
;; (yas/load-directory "~/elisp/snippets")

;;; Browse Kill Ring ---------------------------------------------------

(require 'browse-kill-ring)
(defadvice yank-pop (around kill-ring-browse-maybe (arg))
  "If last action was not a yank, run `browse-kill-ring' instead."
  (if (not (eq last-command 'yank))
      (browse-kill-ring)
    ad-do-it))
(ad-activate 'yank-pop)

;;; twitter.el ---------------------------------------------------------

(autoload 'twitter-get-friends-timeline "twitter" nil t)
(autoload 'twitter-status-edit "twitter" nil t)
;;(global-set-key "\C-xt" 'twitter-get-friends-timeline)
(add-hook 'twitter-status-edit-mode-hook 'longlines-mode)

;;; color-theme -------------------------------------------------------

(add-to-list 'load-path "~/elisp/color-theme")
(require 'color-theme)
(color-theme-initialize)

(defun my-color-theme () 
  (interactive)
  (ecase (intern (completing-read "Theme: " '("light" "dark" "gray" "reset")))
    (light (color-theme-emacs-21))
    (dark  (color-theme-arjen))
    (gray  (color-theme-jedit-grey))
    (reset (color-theme-snapshot))))

;;; hippie-expand fun --------------------------------------------------

(setq hippie-expand-try-functions-list 
      '(try-expand-dabbrev-visible
        try-expand-dabbrev-from-kill
        try-expand-dabbrev-all-buffers
        try-expand-line
        try-complete-file-name-partially
        try-complete-file-name
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

;;; mk-projects --------------------------------------------------------

(add-to-list 'load-path "~/elisp/mk-project")
;(add-to-list 'load-path "~/code/mk-project")
(load "projects.el") ; requires jde to be loaded, see defer-loading-jde

(dolist (mode '(c-mode java-mode cperl-mode emacs-lisp-mode ruby-mode
                       caml-mode lisp-mode clojure-mode))
  (font-lock-add-keywords mode '(("\\(XXX\\|FIXME\\|TODO\\)"
                                  1 font-lock-warning-face prepend))))

(add-hook 'mcp-trace-mode-hook
          (lambda ()
            (local-set-key (kbd "M-n") 'forward-page)
            (local-set-key (kbd "M-p") 'backward-page)
            (local-set-key (kbd "C-c t") 'mcp-trace-toggle-show-transactors)))

;;;; w3m ---------------------------------------------------------------

(add-to-list 'load-path "~/elisp/emacs-w3m")
(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
(global-set-key "\C-xm" 'browse-url-at-point)
(setq w3m-use-cookies t)

;; browse API docs with w3m, firefox otherwise, see also browse-url-of-buffer
(setq browse-url-browser-function '(("hyperspec" . w3m-browse-url)
				    ("javase"    . w3m-browse-url)
				    ("."         . browse-url-firefox)))

(add-hook 'dired-mode-hook
	  (lambda ()
	    (define-key dired-mode-map "\C-xm" 'dired-w3m-find-file)))

(defun dired-w3m-find-file ()
  "In dired, open html file at point in w3m"
  (interactive)
  (require 'w3m)
  (let ((file (dired-get-filename)))
    (if (y-or-n-p (format "Open 'w3m' %s " (file-name-nondirectory file)))
	(w3m-find-file file))))
